{"version":3,"sources":["ES6/index.js","ES6/arrow-function.md","ES6/default-parameters.md","ES6/let.md","ES6/const.md","ES6/template-string.md","ES6/multiline-string.md","ES6/string-include.md","ES6/string-startWith.md","ES6/string-repeat.md","ES6/destructuring-array.md","ES6/destructuring-object.md","ES6/destructuring-nested-objects.md","ES6/object-property-assignment.md","ES6/object-function-assignment.md","ES6/spread-operator-array.md","ES6/spread-operator-object.md","ES6/object-assign.md","ES6/object-entries.md","ES6/exponent-operator.md","ES6/promises-with-finally.md","components/MarkdownParser.jsx","components/ES6.jsx","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["ES6Links","MarkdownParser","props","useState","text","setText","marked","setOptions","pedantic","gfm","breaks","sanitize","smarttexts","hljs","initHighlightingOnLoad","fetch","link","then","res","className","dangerouslySetInnerHTML","__html","ES6","CodeBlockList","map","a","i","Fragment","columnsCountBreakPoints","gutter","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wLA4CeA,G,YAvBE,CCrBF,IAA0B,0CCA1B,IAA0B,8CCA1B,IAA0B,+BCA1B,IAA0B,iCCA1B,IAA0B,2CCA1B,IAA0B,4CCA1B,IAA0B,0CCA1B,IAA0B,4CCA1B,IAA0B,yCCA1B,IAA0B,+CCA1B,IAA0B,gDCA1B,IAA0B,wDCA1B,IAA0B,sDCA1B,IAA0B,sDCA1B,IAA0B,iDCA1B,IAA0B,kDCA1B,IAA0B,yCCA1B,IAA0B,0CCA1B,IAA0B,6CCA1B,IAA0B,mD,gECuC1BC,MAnCf,SAAwBC,GAEvB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAwBC,OAtBDC,IAAOC,WAAW,CACjBC,UAAU,EACVC,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,YAAY,IAGbC,IAAKC,yBAEJC,MAAMb,EAAMc,MACTC,MAAK,SAAAC,GAAG,OAAIA,EAAId,UAChBa,MAAK,SAAAb,GACJC,EAAQD,MAUV,yBACDe,UAAU,oDACVC,wBARM,CACNC,OAAQf,IAAOF,OCQHkB,MA7Bf,WAEE,IAAMC,EAAgBvB,EAASwB,KAAI,SAACC,EAAGC,GAAJ,OACjC,cAAC,EAAD,CAAgBV,KAAMS,GAAQC,MAGhC,OACE,eAAC,IAAMC,SAAP,WAEE,qBAAKR,UAAU,mGAAf,SACE,qBAAKA,UAAU,uCAAf,SACE,oBAAIA,UAAU,sCAAd,gCAMJ,cAAC,oBAAD,CACES,wBAAyB,CAAE,IAAK,EAAG,KAAM,GAD3C,SAGE,cAAC,IAAD,CAASC,OAAO,OAAOV,UAAU,aAAjC,SACGI,UCbIO,MAVf,WACE,OACA,cAAC,IAAMH,SAAP,UACC,qBAAKR,UAAU,cAAf,SACC,cAAC,EAAD,SCKgBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,EAAD,MAEAC,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAACmC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE9G5BrB,M","file":"static/js/main.5356c881.chunk.js","sourcesContent":["import ArrowFunction from \"./arrow-function.md\"\r\nimport DefaultParameters from \"./default-parameters.md\"\r\nimport Let from \"./let.md\"\r\nimport Const from \"./const.md\"\r\nimport TemplateString from \"./template-string.md\"\r\nimport MultilineString from \"./multiline-string.md\"\r\nimport StringInclude from \"./string-include.md\"\r\nimport StringStartWith from \"./string-startWith.md\"\r\nimport StringRepeat from \"./string-repeat.md\"\r\nimport DestructuringArray from \"./destructuring-array.md\"\r\nimport DestructuringObject from \"./destructuring-object.md\"\r\nimport DestructuringNestedObjects from \"./destructuring-nested-objects.md\"\r\nimport ObjectPropertyAssignment from \"./object-property-assignment.md\"\r\nimport ObjectFunctionAssignment from \"./object-function-assignment.md\"\r\nimport SpreadOperatorArray from \"./spread-operator-array.md\"\r\nimport SpreadOperatorObject from \"./spread-operator-object.md\"\r\nimport ObjectAssign from \"./object-assign.md\"\r\nimport ObjectEntries from \"./object-entries.md\"\r\nimport ExponentOperator from \"./exponent-operator.md\"\r\nimport PromisesWithFinally from \"./promises-with-finally.md\"\r\n\r\nconst ES6Links = [\r\n  ArrowFunction,\r\n  DefaultParameters,\r\n  Let,\r\n  Const,\r\n  TemplateString,\r\n  MultilineString,\r\n  StringInclude,\r\n  StringStartWith,\r\n  StringRepeat,\r\n  DestructuringArray,\r\n  DestructuringObject,\r\n  DestructuringNestedObjects,\r\n  ObjectPropertyAssignment,\r\n  ObjectFunctionAssignment,\r\n  SpreadOperatorArray,\r\n  SpreadOperatorObject,\r\n  ObjectAssign,\r\n  ObjectEntries,\r\n  ExponentOperator,\r\n  PromisesWithFinally\r\n] \r\n\r\nexport default ES6Links","export default __webpack_public_path__ + \"static/media/arrow-function.b5a1be0c.md\";","export default __webpack_public_path__ + \"static/media/default-parameters.dfdd9c26.md\";","export default __webpack_public_path__ + \"static/media/let.d6f2e623.md\";","export default __webpack_public_path__ + \"static/media/const.e30662b8.md\";","export default __webpack_public_path__ + \"static/media/template-string.b4c9d43e.md\";","export default __webpack_public_path__ + \"static/media/multiline-string.0060114a.md\";","export default __webpack_public_path__ + \"static/media/string-include.2079138e.md\";","export default __webpack_public_path__ + \"static/media/string-startWith.ae334528.md\";","export default __webpack_public_path__ + \"static/media/string-repeat.3b476f0b.md\";","export default __webpack_public_path__ + \"static/media/destructuring-array.6b0d2ce7.md\";","export default __webpack_public_path__ + \"static/media/destructuring-object.c544a69e.md\";","export default __webpack_public_path__ + \"static/media/destructuring-nested-objects.bae117e0.md\";","export default __webpack_public_path__ + \"static/media/object-property-assignment.a0e7e895.md\";","export default __webpack_public_path__ + \"static/media/object-function-assignment.86e7459a.md\";","export default __webpack_public_path__ + \"static/media/spread-operator-array.3bd4b95f.md\";","export default __webpack_public_path__ + \"static/media/spread-operator-object.79d26e44.md\";","export default __webpack_public_path__ + \"static/media/object-assign.ccdfab08.md\";","export default __webpack_public_path__ + \"static/media/object-entries.25c67d67.md\";","export default __webpack_public_path__ + \"static/media/exponent-operator.7aa6b968.md\";","export default __webpack_public_path__ + \"static/media/promises-with-finally.bc049f3a.md\";","import React, { useState } from 'react'\r\nimport marked from \"marked\"\r\nimport hljs from 'highlight.js'\r\n\r\nfunction MarkdownParser(props) {\r\n\t\r\n\tconst [text, setText] = useState(\"\")\r\n\t\r\n\tmarked.setOptions({\r\n\t\tpedantic: false,\r\n\t\tgfm: true,\r\n\t\tbreaks: true,\r\n\t\tsanitize: false,\r\n\t\tsmarttexts: true,\r\n\t});\r\n\r\n\thljs.initHighlightingOnLoad()\r\n  \r\n  fetch(props.link)\r\n    .then(res => res.text())\r\n    .then(text => {\r\n      setText(text)\r\n    })\r\n\r\n\tconst markdown = () => {\r\n\t\treturn {\r\n\t\t\t__html: marked(text)\r\n\t\t}\r\n\t}\r\n\r\n  return (\r\n    <section\r\n\t\t\tclassName=\"code-block bg-gray-200 rounded-md overflow-hidden\" \r\n\t\t\tdangerouslySetInnerHTML={markdown()} \r\n\t\t/>\r\n  )\r\n\t\r\n}\r\n\r\nexport default MarkdownParser","import React from 'react'\r\nimport ES6Links from \"../ES6\"\r\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\"\r\nimport MarkdownParser from './MarkdownParser'\r\n\r\nfunction ES6() {\r\n  \r\n  const CodeBlockList = ES6Links.map((a, i) => \r\n    <MarkdownParser link={a} key={i} />\r\n  )\r\n\r\n  return (\r\n    <React.Fragment>\r\n      \r\n      <div className=\"aspect-w-1 aspect-h-1 sm:aspect-w-2 sm:aspect-h-1 md:aspect-w-3 md:aspect-h-1 bg-yellow-300 mb-8\">\r\n        <div className=\"flex justify-center items-center p-4\">\r\n          <h1 className=\"font-bold text-4xl text-center m-0 \">\r\n            ES6 CheatSheet\r\n          </h1>\r\n        </div>\r\n      </div>\r\n\r\n      <ResponsiveMasonry\r\n        columnsCountBreakPoints={{ 640: 1, 1024: 2 }}\r\n      >\r\n        <Masonry gutter=\"2rem\" className=\"p-4 lg:p-8\">\r\n          {CodeBlockList}\r\n        </Masonry>\r\n      </ResponsiveMasonry>\r\n      \r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ES6","import React from 'react'\r\nimport ES6 from \"./components/ES6\"\r\n\r\nfunction App() {\r\n  return (\r\n\t\t<React.Fragment>\r\n\t\t\t<div className=\"bg-gray-100\">\r\n\t\t\t\t<ES6 />\r\n\t\t\t</div>\r\n\t\t</React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'highlight.js/styles/base16/material-palenight.css'\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n\t\t<App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}